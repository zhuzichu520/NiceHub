ext {
    // 获取Gradle配置
    getMyGradleProperties = this.&getMyGradleProperties
    // 获取property配置文件
    getMyConfigProperties = this.&getMyConfigProperties
    // 获取编译SDK版本号
    getAppCompileSdkVersion = this.&getAppCompileSdkVersion
    // 获取SDK最小支持版本号
    getAppMinSdkVersion = this.&getAppMinSdkVersion
    // 获取App最佳适配Sdk版本号
    getAppTargetSdkVersion = this.&getAppTargetSdkVersion
    // 获取App名称
    getAppName = this.&getAppName
    // 获取App 唯一Id
    getMyApplicationId = this.&getMyApplicationId
    // 获取App版本名称
    getAppVersionName = this.&getAppVersionName
    // 获取App版本号
    getAppVersionCode = this.&getAppVersionCode
    // 加载签名配置
    loadApkSignConfigs = this.&loadApkSignConfigs
    // 运行环境
    getRunEnvironment = this.&getRunEnvironment
    // 是否写入BuildConfig.java文件中
    isWriteToBuildConfig = this.&isWriteToBuildConfig
    // 获取Java数据类型
    getJavaDataType = this.&getJavaDataType
    // 获取常量名称
    getConstantName = this.&getConstantName
    // 获取常量值
    getConstantValue = this.&getConstantValue
    // 日志
    log = this.&log
}

//========================================================
//====================== 属性文件 =========================
//========================================================
/**
 * 根据路径读取属性配置文件
 * @param propertyFilePath 配置文件路径
 */
def getMyProperties(String propertyFilePath) {
    log('getMyProperties', ('properties文件路径:' + propertyFilePath))
    def propFile = project.file(propertyFilePath)

    if (propFile.canRead()) {
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        return props
    } else {
        throw new Exception(propertyFilePath + "文件未找到！")
    }
}

/**
 * 获取常量名称(写入BuildConfig.java)
 */
def getConstantName(String[] configKeyArray) {
    StringBuilder constNameSb = new StringBuilder('')
    for (int i = 4; i < configKeyArray.length; i++) {
        String splitFlag = (i > 4) ? '_' : ''
        constNameSb.append(splitFlag + configKeyArray[i])
    }

    return constNameSb.toString()
}

/**
 * 获取常量值(写入BuildConfig.java)
 */
def getConstantValue(String key, String[] keyArray, Properties props) {
    if (keyArray[3].indexOf('STRING') >= 0) {
        return ('"' + props.get(key) + '"')
    } else if (keyArray[3].indexOf('CHAR') >= 0) {
        return ('\'' + props.get(key) + '\'')
    } else {
        return props.get(key)
    }
}

/**
 * 获取Java数据类型
 * @param configKeyArray 配置key 字符串数组
 * @return 如:String, int, double等
 */
def getJavaDataType(String[] configKeyArray) {
    String dataType = configKeyArray[3]
    return (dataType.indexOf('STRING') >= 0) ? 'String' : dataType.toLowerCase()
}


/**
 * 根据Key查询properties内容
 * @param prop 属性配置解析器
 * @param key 查询的key
 * @return value
 */
static def getPropertyByKey(Properties prop, String key) {
    // check
    if (prop == null || key == null) {
        throw new Exception('重要值为null！configProp：' + prop + ', key:' + key)
    }

    if (prop.containsKey(key)) {
        String value = prop[key]
        if (value == null || value.trim().length() == 0) {
            throw new Exception('Properties配置文件' + key + '配置项值为空！')
        }

        return value.trim()
    } else {
        throw new Exception('Properties配置文件中未找到' + key + '配置项！')
    }
}

/**
 * 获取解析default-config.properties, flavor-config.properties属性文件
 **/
def getMyConfigProperties(Properties gradleProp, boolean isPrint = false) {
    /* 默认配置 */
    def defaultPropFilePath = 'app/default-config.properties'
    Properties defaultProp = getMyProperties(defaultPropFilePath)
    /* flavor 配置 */
    def flavorPropFilePath = 'app/src/main/flavor-config.properties'
    Properties flavorProp = getMyProperties(flavorPropFilePath)
    /* 撮合两种配置文件 */
    for (String key in flavorProp.keySet()) {
        defaultProp.put(key, flavorProp.get(key))
    }

    /* 撮合app2地址 (在非beta、release环境下, APP_SERVER_URL若配置合法地址，优先使用) */
    String envName = getRunEnvironment(gradleProp).toUpperCase()
    if (!('BETA' == envName || 'RELEASE' == envName)) {
        String customServerUrl = getAppServerUrl(gradleProp)

        if (customServerUrl.startsWith("http://") || customServerUrl.startsWith("https://")) {
            String key = 'BUILD_CONFIG_' + envName + '_STRING_HOST_APP2'
            log('getMyConfigProperties', '替换app2地址, key:' + key + ', oldUrl:' + defaultProp.get(key) + ', newUrl:' + customServerUrl)
            defaultProp.put(key, customServerUrl)
        }
    }

    if (isPrint) {
        printAllProperties('xxx-config配置', defaultProp)
    }
    return defaultProp
}

//========================================================
//=================== BuildConfig.java ===================
//========================================================
/**
 * 获取App后端服务器地址
 */
def getAppServerUrl(Properties gradleProp) {
    String appServerUrl = getPropertyByKey(gradleProp, 'APP_SERVER_URL')
    log('getAppServerUrl', 'App服务器地址：' + appServerUrl)
    return appServerUrl
}

//========================================================
//====================== 编译 App 环境 ====================
//========================================================
/**
 * 获取编译SDK版本号
 **/
def getAppCompileSdkVersion(Properties gradleProp) {
    int compileSdkVersion = Integer.parseInt(getPropertyByKey(gradleProp, 'COMPILE_SDK_VERSION'))
    log('getAppCompileSdkVersion', ('compileSdkVersion：' + compileSdkVersion))
    return compileSdkVersion
}

/**
 * 获取App运行环境
 * @return weekly、emergency、mvip、version、beta、release
 */
def getRunEnvironment(Properties gradleProp) {
    def environment = getPropertyByKey(gradleProp, 'ENVIRONMENT')
    log('getRunEnvironment', 'App运行环境是：' + environment)
    return environment
}

/**
 * 获取App名称
 */
static def getAppName(Properties configProp) {
    String appName = getPropertyByKey(configProp, 'APP_NAME')
    if (appName == null || appName.trim().isEmpty()) {
        throw new Exception('appName名称为空！')
    }
    return appName
}

/**
 * 获取App 唯一Id
 * @param appNameStr app名称
 */
def getMyApplicationId(Properties configProp, String appNameStr) {
    String appId = getPropertyByKey(configProp, 'APPLICATION_ID')
    log('getMyApplicationId', ('appName:' + appNameStr + ', AppId:' + appId))
    return appId
}

/**
 * 获取App最佳适配Sdk版本号
 */
def getAppTargetSdkVersion(Properties gradleProp) {
    String targetSdkVersion = getPropertyByKey(gradleProp, 'TARGET_SDK_VERSION')
    log('getAppTargetSdkVersion', ('targetSdkVersion：' + targetSdkVersion))
    return targetSdkVersion
}

/**
 * 获取App版本名称
 * 如：5.3.1
 **/
def getAppVersionName(Properties gradleProp, Properties configProp) {
    String defaultVersionName = getPropertyByKey(configProp, 'APP_VERSION_NAME')

    if (isJenkinsBuild()) {// Jenkins打包
        String customVersionName = getPropertyByKey(gradleProp, 'CUSTOM_VERSION_NAME')
        boolean hasCustomVerName = (customVersionName.indexOf('.') > 0)
        def versionName = hasCustomVerName ? customVersionName : defaultVersionName
        log('getAppVersionName', ('App默认版本名称：' + defaultVersionName + ', 自定义版本名称' + customVersionName + ', 是否自定义版本？:' + hasCustomVerName + ', git地址:' + GIT_ADDRESS))
        return versionName
    } else {// 开发者打包
        log('getAppVersionName', ('App版本名称：' + defaultVersionName + '(解析flavor-config.properties)'))
        return defaultVersionName
    }
}

/**
 * 获取App版本号
 * @return 如：103
 */
def getAppVersionCode(Properties configProp) {
    int defaultVersionCode = Integer.parseInt(getPropertyByKey(configProp, 'APP_VERSION_CODE'))

    if (isJenkinsBuild()) {// Jenkins环境, 取build Version Code码
        ext.env = System.getenv()
        def versionCode = env.BUILD_NUMBER?.toInteger()
        versionCode = (versionCode == null) ? defaultVersionCode : versionCode
        log('getAppVersionCode', 'Jenkins环境打包方式，versionCode：' + versionCode)
        return versionCode
    } else {// 开发环境
        log('getAppVersionCode', '开发者环境打包方式，versionCode：' + defaultVersionCode)
        return defaultVersionCode
    }
}

/**
 * 获取SDK最小支持版本号
 */
def getAppMinSdkVersion(Properties gradleProp) {
    String minSdkVersion = getPropertyByKey(gradleProp, 'MIN_SDK_VERSION')
    log('getAppMinSdkVersion', ('minSdkVersion：' + minSdkVersion))
    return minSdkVersion
}


//========================================================
//====================== 属性文件 =========================
//========================================================
/**
 * 获取Gradle Properties配置
 */
def getMyGradleProperties(boolean isPrint = false) {
    Properties gradleProp = getMyProperties('gradle.properties')
    String flag = 'gradle配置'

    /* 恢复jenkins配置项 */
    if (IS_JENKINS.toBoolean()) {
        for (String key : gradleProp.keys()) {
            log('getMyGradleProperties', ('Jenkins替换gradle.properties配置，key：' + key
                    + '，原值:' + gradleProp.get(key) + ', 新值:' + ext.get(key)))
            gradleProp.put(key, ext.get(key))
        }
    }

    /* 撮合配置，即：使用local.properties替代gradle.properties存在的配置项 */
    if (isUseLocalPropertyFirst()) {
        flag = '(gradle + local配置)'
        Properties localProp = getMyProperties('local.properties')

        for (String key in localProp.keySet()) {
            log('getMyGradleProperties', ('local.properties替换gradle.properties配置，key：' + key
                    + '，原值:' + gradleProp.get(key) + ', 新值:' + localProp.get(key)))
            gradleProp.put(key, localProp.get(key))
        }
    }

    if (isPrint) {
        printAllProperties(flag, gradleProp)
    }

    return gradleProp
}

/**
 * 是否写入BuildConfig.java文件中
 * @param configProp 配置
 * @param key 关键字, 值如：BUILD_CONFIG_WEEKLY_STRING_HOST_APP2=http://172.31.0.55:2015/
 * @param currentRunEnv 当前App构建环境
 * @return true:写入。
 */
def isWriteToBuildConfig(Properties configProp, String key, String currentRunEnv) {
    String buildConfigPrefix = 'BUILD_CONFIG'

    if (key.startsWith(buildConfigPrefix)) {
        String[] keyArray = key.split("_")
        String configRunEnv = keyArray[2]
        //log('isWriteToBuildConfig', 'configRunEnv:' + configRunEnv + ', currentRunEnv:' + currentRunEnv)

        if (key.indexOf(buildConfigPrefix + '_' + currentRunEnv) >= 0) {// 构建环境完全匹配
            //log('isWriteToBuildConfig', '当前环境匹配, key:' + key)
            return true
        } else if (configRunEnv.indexOf('DEFAULT') >= 0) {// 默认值
            String envPrefix = 'BUILD_CONFIG_' + currentRunEnv
            String envConfigKey = envPrefix + key.substring('BUILD_CONFIG_DEFAULT'.length())
            // log('isWriteToBuildConfig', 'DEFAULT参数, oriKey:' + key + ', ePrefix:' + envPrefix + ', eCfgKey:' + envConfigKey + ', isWrite:' + (!props.containsKey(envConfigKey)))
            return !configProp.containsKey(envConfigKey)
        } else {// 其它环境
            // log('isWriteToBuildConfig', '被过滤的key:' + key)
        }
    }

    return false
}


//========================================================
//====================== 签名 =============================
//========================================================
/**
 * 加载Apk签名信息
 */
def loadApkSignConfigs(Properties gradleProp) {
    boolean isReleaseBuildType = 'Release'.equalsIgnoreCase(getBuildType(gradleProp))
    String releaseSignConfigPath = getPropertyByKey(gradleProp, 'RELEASE_SIGN_CONFIGS_PATH')
    if (isReleaseBuildType && !releaseSignConfigPath.trim().isEmpty() && !'None'.equalsIgnoreCase(releaseSignConfigPath)) {
        String alias = getPropertyByKey(configProp, 'SIGN_KEY_ALIAS')
        String keyPwd = getPropertyByKey(configProp, 'SIGN_KEY_PASSWORD')
        String storeFile = getPropertyByKey(configProp, 'SIGN_STORE_FILE')
        String storePwd = getPropertyByKey(configProp, 'SIGN_STORE_PASSWORD')

        if (!alias.isEmpty() && !keyPwd.isEmpty() && !storeFile.isEmpty() && !storePwd.isEmpty()) {
            log('loadApkSignConfigs', '使用正式站签名')
            return ['ALIAS': alias, 'KEY_PWD': keyPwd, 'STORE_FILE': storeFile, 'STORE_PWD': storePwd]
        }
    }
    return ['ALIAS': buildAppSign.debug_key_alias, 'KEY_PWD': buildAppSign.debug_key_password, 'STORE_FILE': buildAppSign.debug_store_file, 'STORE_PWD': buildAppSign.debug_store_password]
}


/**
 * 获取构建方式
 * @return debug 或 release
 */
def getBuildType(Properties gradleProp) {
    String buildType = getPropertyByKey(gradleProp, 'BUILD_TYPE')
    log('getBuildType', ('buildType:' + buildType))
    return buildType.trim()
}

//========================================================
//=========================其它 ===========================
//========================================================
/**
 * 是否Jenkins打包方式
 * @return true：是
 */
def isJenkinsBuild() {
    boolean isJenkinsBuild = project.hasProperty('IS_JENKINS') ? Boolean.parseBoolean(IS_JENKINS) : false
    log('isJenkinsBuild', ('是否Jenkins构建：' + isJenkinsBuild))
    return isJenkinsBuild
}


/**
 * 打印日志到控制台
 */
def log(String flag, String logMsg) {
    println('=====flag->' + flag + ', ' + logMsg)
}